#
# Basic SLAC EVR Substitutions file
# Set event specific variations here.
#
# This file also gets processed via msi to produce
# $(EVENT)/db/evrSLAC.db
# You can load that file directly from st.cmd if all
# you need is a generic card 0 SLAC EVR instance.
#
# Example:
# dbLoadRecords( "db/evrSLAC.db", "EVR=AMO:R06:EVR:19,CARD=0" )
#
# If you need to customize the initial starting database,
# or create a non-std EVR database, this basic substitutions
# file can be used as a starting point.  Add macro values for
# any macros in the template files where you want something
# other than the default.

# Need one instance of evrSLAC for the card
file evrSLAC.template
{
	{	DEV = "$(EVR)"	}
}


# Need twelve instances of evrDevTrig for 12 front panel outputs
#
# Required macros:
#	EVR  - EVR PV prefix
#	TRIG - Trigger PV prefix
#	TYPE - Trigger type, DG for ext Delay pulse Generators, OT for OTP Triggers
#	TCTL - Trigger control (enable) field, one of DG0E, DG1E, DG2E, OTP0, ..., OTPD
file evrDevTrig.db
{
	pattern
	{	N,	TRIG,			TYPE,	TCTL	}
	{	0,	$(EVR):TRIG0,	DG,		DG$(N)E	}
	{	1,	$(EVR):TRIG1,	DG,		DG$(N)E	}
	{	2,	$(EVR):TRIG2,	DG,		DG$(N)E	}
	{	3,	$(EVR):TRIG3,	DG,		DG$(N)E	}
	{	4,	$(EVR):TRIG4,	DG,		DG$(N)E	}
	{	5,	$(EVR):TRIG5,	DG,		DG$(N)E	}
	{	6,	$(EVR):TRIG6,	DG,		DG$(N)E	}
	{	7,	$(EVR):TRIG7,	DG,		DG$(N)E	}
	{	8,	$(EVR):TRIG8,	DG,		DG$(N)E	}
	{	9,	$(EVR):TRIG9,	DG,		DG$(N)E	}
	{	A,	$(EVR):TRIGA,	DG,		DG$(N)E	}
	{	B,	$(EVR):TRIGB,	DG,		DG$(N)E	}
}

# Make a set of event control records for each output trigger
file evrPmcEvent.template
{
    pattern
    { DEV,      	NAME,	ID,  P0,P1,P2,IRQ, EVRFLNK	}
    { $(EVR):TRIG0,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG1,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG2,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG3,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG4,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG5,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG6,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG7,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG8,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIG9,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIGA,	EVENT,	140,  0, 0, 0, 1,	""	}
    { $(EVR):TRIGB,	EVENT,	140,  0, 0, 0, 1,	""	}
}


#
# Create 14 event controls
#
#   DEV     Name of EVR
#   NAME    EVENT1 to EVENT14 - instantiate all 14 records even if you only use a few events.
#   ID  	Event code number.
file evrPmcEvent.template
{
#     Device    <------Event ------------------>       
    pattern
    { DEV,      NAME,    ID,  LNAME             }
    { $(EVR),   EVENT1, 140,  "Beam Full"       }
    { $(EVR),   EVENT2, 141,  "Beam & 60Hz"     }
    { $(EVR),   EVENT3, 142,  "Beam & 30Hz"     }
    { $(EVR),   EVENT4, 143,  "Beam & 10Hz"     }
    { $(EVR),   EVENT5, 144,  "Beam & 5Hz"      }
    { $(EVR),   EVENT6, 145,  "Beam & 1Hz"      }
    { $(EVR),   EVENT7, 146,  "Beam & 0.5Hz"    }
    { $(EVR),   EVENT8,  40,  "120Hz"           }
    { $(EVR),   EVENT9,  41,  "60Hz"            }
    { $(EVR),   EVENT10, 42,  "30Hz"            }
    { $(EVR),   EVENT11, 43,  "10Hz"            }
    { $(EVR),   EVENT12, 44,  "5Hz"             }
    { $(EVR),   EVENT13, 45,  "1Hz"             }
    { $(EVR),   EVENT14, 46,  "0.5Hz"           }
}

# Need one instance of fiducialTimestamp.db for
# pattern processing and fiduicial ID timestamping
file fiducialTimestamp.db
{
    { DEV=$(EVR) }
}

#
# Creates records to support the event sequencer
# event codes for the LCLS accelerator and PCDS experiments
file pcdsEventCodes.db
{
   { DEV="$(EVR)", EVG="EVNT:SYS0" }
}


